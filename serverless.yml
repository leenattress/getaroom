# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: getaroom-${self:provider.infraStackName}

plugins:
  - serverless-finch
  - serverless-stack-output
  - serverless-webpack

frameworkVersion: '1'

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  infraStackName: ${opt:stack}
  iamRoleStatements:
    ${file(./config/iamRoleStatements.yml)}  
  environment:
    APPLICATION_TABLE:
      Ref: ApplicationDynamoDBTable
    API_REGION: "${self:provider.region}" 

  # optional
  websocketApiName: websocket-chat-${self:service}

  # required for websocket apis
  # this selects from your payload what your "route" parameter is
  # from the websocket event types on your function
  websocketApiRouteSelectionExpression: $request.body.action



# Variables
custom:

  # Webpack for lambda handlers
  webpack:
    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file
    includeModules: false   # Node modules configuration for packaging
    packager: 'npm'   # Packager that will be used to package your external modules
    excludeFiles: src/**/*.test.js # Provide a glob for files to ignore

  # Exports to file config
  output:
    file: client/src/stack.json # toml, yaml, yml, and json format is available

  # Buckets
  # snippetBucket: ${self:service}-snippet-storage 
  clientBucket: ${self:service}-client

  # Client Frontend
  client: 
    bucketName: ${self:custom.clientBucket}
    indexDocument: index.html
    errorDocument: error.html

# CloudFormation resource templates here
resources:
  - ${file(./config/resources.yml)}    
  
functions:
  # manage connection and disconnection of clients
  connectionManager:
    handler: src/handler.connectionManager
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect

  # just in case we are getting weird / bad data
  # we can react to it with a sane response
  defaultMessages:
    handler: src/handler.defaultMessage
    events:
      - websocket:
          route: $default

  # handle chat app messages
  sendMessage:
    handler: src/handler.sendMessage
    events:
      - websocket:
          route: sendMessage

  # Channel Subscriptions
  channelManager:
    handler: src/handler.channelManager
    events:
      - websocket:
          route: subscribeChannel
      - websocket:
          route: unsubscribeChannel

  # handle broadcasting all events
  # we do this by listening the dynamodb table stream for messages or disconnects
  # could even be done by sub-systems directly to dynamodb
  broadcast:
    handler: src/handler.broadcast
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [ApplicationDynamoDBTable, StreamArn]

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
