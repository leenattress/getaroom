import{r as s,c as e,h as t,H as n}from"./p-0d69e0e3.js";const o=class{constructor(t){s(this,t),this.messageSendEvent=e(this,"messageSendEvent",7),this.messages=[]}messageSendHandler(s){console.log("EVENT",{action:"sendMessage",name:this.username,channelId:this.channel,content:s.detail}),this.socket.send(JSON.stringify({action:"sendMessage",name:this.username,channelId:this.channel,content:s.detail}))}setupSockets(){this.socket=new WebSocket(this.socketServer),this.socket.onopen=s=>{console.log("Connection established",s)},this.socket.onclose=s=>{console.log("Connection closed",s)},this.socket.onmessage=s=>{const e=JSON.parse(s.data);"channel_message"===e.event&&(console.log(e.name+" says: "+e.content),this.messages.push({name:e.name,content:e.content}),this.messages=[...this.messages],console.log("MESSAGES",this.messages)),"subscriber_sub"===e.event&&console.log(e),"subscriber_unsub"===e.event&&console.log(e)}}async init(s){const{username:e,server:t,channel:n}=s;this.username=e,this.socketServer=t,this.channel=n,this.socketServer&&this.setupSockets()}componentDidLoad(){this.socketServer&&this.setupSockets()}render(){return t(n,null,t("chat-conversation",{chatmessages:this.messages}),t("chat-message",null))}};o.style=":host{display:block}";export{o as chat_client}